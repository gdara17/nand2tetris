// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;

        while (i < 8192) {
            let screen[i] = 0;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;

        let address = (32 * y) + (x / 16);
        let value = Memory.peek(screen + address);

        if (color) {
            let value = value | Math.twoToThe(x & 15);
        } else {
            let value = value & ~Math.twoToThe(x & 15);
        }

        do Memory.poke(screen + address, value);

        return;
    }

    /** Draws horizontal line from pixel (x1,y) to pixel (x2,y), using the current color. */
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int tmp;

        if (x2 < x1) {
            let tmp = x2;
            let x2 = x1;
            let x1 = tmp;
        }

        while (~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }

        return;
    }

    /** Draws vertical line from pixel (x,y1) to pixel (x,y2), using the current color. */
    function void drawVerticalLine(int x, int y1, int y2) {
        var int tmp;

        if (y2 < y1) {
            let tmp = y2;
            let y2 = y1;
            let y1 = tmp;
        }

        while (~(y1 > y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, tmp;
        var boolean northEast;
        let a = 0;
        let b = 0;
        let diff = 0;

        /* Sort points by ascending x coordinates */
        if (x2 < x1) {
            let tmp = x2;
            let x2 = x1;
            let x1 = tmp;

            let tmp = y2;
            let y2 = y1;
            let y1 = tmp;
        }
        
        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }

        if (dy = 0) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        if (dy < 0) {
            let northEast = true;
            let dy = -dy;
        }

        while (~(a > dx) & ~(b > dy)) {
            if (northEast) {
                do Screen.drawPixel(x1 + a, y1 - b);
            } else {
                do Screen.drawPixel(x1 + a, y1 + b);
            }

            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, rSquare;

        if (r > 181) {
            return;
        }

        let dy = -r;
        let rSquare = r * r;

        while (~(dy > r)) {
            let dx = Math.sqrt(rSquare - (dy * dy));
            do Screen.drawHorizontalLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
