// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);

        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
    
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, bitIndex;
        let sum = 0;
        let shiftedX = x;
        let bitIndex = 0;

        while (bitIndex < 16) {
            if (Math.bit(y, bitIndex)) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let bitIndex = bitIndex + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;
        var boolean sign; // true for +, false for -

        let sign = ((x < 0) = (y < 0));
        let x = Math.abs(x);
        let y = Math.abs(y);

        let result = Math.divideRec(x, y);

        if (sign) {
            return result;
        }

        return -result;
    }

    function int divideRec(int x, int y) {
        var int quotient, result;
        
        if (y > x | y < 0) {
            return 0;
        }

        let quotient = Math.divideRec(x, y + y);
        if ((x - ((quotient + quotient) * y)) < y) {
            let result = quotient + quotient;
        } else {
            let result = quotient + quotient + 1;
        }

        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, tmp, tmpSqr;

        let y = 0;
        let j = 7; // (16 / 2) - 1

        while (~(j < 0)) {
            let tmp = y + twoToThe[j];
            let tmpSqr = tmp * tmp;

            if (~(tmpSqr > x) & (tmpSqr > 0)) {
                let y = tmp;
            }

            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }

        return b;
    }

    /** Returns true if the i-th bit of x is 1, false otherwise. */
    function boolean bit(int x, int i) {
        return ~((x & twoToThe[i]) = 0);
    }

    /** Returns 2 to the power of i */
    function int twoToThe(int i) {
        return twoToThe[i];
    }
}
